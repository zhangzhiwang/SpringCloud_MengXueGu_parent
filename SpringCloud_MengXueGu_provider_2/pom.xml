<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.asiainfo</groupId>
		<artifactId>SpringCloud_MengXueGu_parent</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>SpringCloud_MengXueGu_provider_2</artifactId>
	<packaging>jar</packaging>
	<name>SpringCloud_MengXueGu_provider</name>
	<url>http://maven.apache.org</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.asiainfo</groupId>
			<artifactId>SpringCloud_MengXueGu_api</artifactId>
			<version>0.0.1-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!-- eureka客户端 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>	<!-- 此处引包时一定要注意artifactId要引spring-cloud-starter-netflix-eureka-client，不要引spring-cloud-netflix-eureka-client。引用的时候看好了否则服务注册不上 -->
		</dependency>
		<!-- hystrix熔断器 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<!-- config客户端 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!-- bus消息总线 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bus-amqp</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
	</dependencies>
	
	<build>
		<finalName>app</finalName>
		<plugins>
			<!-- 插件一定要在其他构建插件之上，否则打包文件会有问题。 -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<!-- docker的maven插件，官网: https://github.com/spotify/docker-maven-plugin -->
			<plugin>
				<groupId>com.spotify</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>1.0.0</version> <!--生成镜像相关配置 -->
				<configuration>
					<!-- 将forceTags设为true，这样就会覆盖构建相同标签的镜像 -->
					<forceTags>true</forceTags>
					<!-- 远程 docker 宿主机地址, 端口号是/lib/systemd/system/docker.service所暴露的端口号, 生成镜 像到docker中 -->
					<dockerHost>http://192.168.124.4:2375</dockerHost> <!--内容是之前修改的maven的settings.xml配置文件中，server节点的id -->
					<serverId>docker-aliyun</serverId>
					<!-- 镜像名:阿里云镜像仓库地址 ${project.artifactId}引用当前工程名， ${project.version}引用当前工程版本号 registry.cn-hangzhou.aliyuncs.com/mengxuegu/demo:0.0.1-SNAPSHOT -->
					<imageName>registry.cn-hangzhou.aliyuncs.com/liming8909/springcloud_mengxuegu_provider_2:${project.version}</imageName>
					<!--基础镜像 -->
					<!--<baseImage>jdk1.8</baseImage> -->
					<baseImage>java</baseImage> <!--类似于Dockerfile的ENTRYPOINT指令 -->
					<entryPoint>["java", "-jar", "/${project.build.finalName}.jar"]</entryPoint>
					<resources>
						<resource>  <!-- 指定打包的资源文件 -->
							<targetPath>/</targetPath> <!-- 指定要复制的目录路径，这里是当前目录 -->
							<directory>${project.build.directory}</directory> <!-- 指定要复制的根目录，这里是target目录 -->
							<include>${project.build.finalName}.jar</include> <!-- 这里指定最后生成的jar包 -->
						</resource>
					</resources>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
